How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Diff function showed only lines that where different, reducing the amount of code needing to check out looking for bug. 

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Knowing history will prevent us from repeating it. 
    When we are looking at old project and we don't remember what part is doing what we can look at history and see what we are looking for faster than reading all of code. 

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    pros: Freedom to commit when thinking the change is important enough. 
    	  Every commit is logical to us and later when looking at them we know what every one is, automatic would have problem with comments/names of commits, and when reflecting on them we wouldn't know what each commit does. 
    cons: Human error, we can forget to commit.
    	  Working in teams, different people have different logic, so some commits made by other people would not be logical to us, and vice versa. And different people would use different names for commits. This can be avoided to some extent with following rules/guides of commits.  

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is mostly used for programming languages and in them multiple files make a whole, and often saving only one file makes no sense. Others like Google Docs are also used for novels, books, forums... 

How can you use the commands git log and git diff to view the history of files?

    We use git log to see different versions, and with git diff of two or more commits we see difference between them. 

How might using version control make you more confident to make changes that
could break something?

    It gives you safety. If you brake something you can always go to older version where the code is not broken. 

Now that you have your workspace set up, what do you want to try using Git for?

    For start getting used to using it, and little by little getting comfortable  using it in everything I do. 
