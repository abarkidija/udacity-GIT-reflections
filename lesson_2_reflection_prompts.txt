What happens when you initialize a repository? Why do you need to do it?
	It is a first step. It makes repository in which we can save commits and work with. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	We could make more changes on staging area and when the code works we save it with commit. We should save thing in commit that will have logical usage later, and use staging area like a test to see is the change important enough to commit. 

How can you use the staging area to make sure you have one commit per logical
change?
	we can add multiple changes/files to staging area before using commit. Example we add css, html, jscript separately on staging area, and than use commit on all 3 at once if the changes on all 3 make logical change. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	We use main/master branch for code that works, and do the experiments on branches. Later if the change is good and it works for us we can merge it with master, and if does not work we just leave that branch. 

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
